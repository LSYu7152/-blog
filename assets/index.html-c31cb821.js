import{_ as n,W as s,X as a,Y as t}from"./framework-d3c6dbde.js";const e="/img/java/java_memory.png",p={},o=t(`<h2 id="變數" tabindex="-1"><a class="header-anchor" href="#變數" aria-hidden="true">#</a> 變數</h2><p>變數是程式中最常被使用到的功能之一，顧名思義就是一個可以被改變的數值。</p><p>而在程式中，變數事實上指的是一個 <strong>儲存資料的空間</strong> ；正因為變數是一個儲存資料的空間，因此這個空間中存放的數值可以隨時被改變。</p><p>當我們要使用變數時我們需要先進行 <strong>宣告</strong> ，宣告即創建一個空間並給予這個空間一個代號方便我們來使用，範例如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 宣告可以拆解為兩個部分</span>
        <span class="token comment">// 資料型態 變數名稱;</span>
        
        <span class="token keyword">int</span> integer1<span class="token punctuation">;</span><span class="token comment">// 進行一個資料型態為int的變數宣告 並將變數名稱設定為integer1</span>
        
        <span class="token comment">// 也可以一次宣告多個相同資料型態的空間</span>
        <span class="token comment">// 資料型態 變數名稱, 變數名稱2, 變數名稱3;</span>
        
        <span class="token keyword">int</span> integer2<span class="token punctuation">,</span> integer3<span class="token punctuation">,</span> integer4<span class="token punctuation">;</span><span class="token comment">// 通過逗號座分隔連續宣告多個 int型態的變數</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在變數名稱的命名上我們使用 <strong>駝峰命名法</strong> ，也就是變數必須要是 <strong>英文開頭</strong> 且 <strong>第一個英文字母小寫</strong> ， <strong>第一個英文字母後的所有字母以大寫做區隔</strong> 。且命名盡量使用有意義的名稱。</p><h2 id="資料型態" tabindex="-1"><a class="header-anchor" href="#資料型態" aria-hidden="true">#</a> 資料型態</h2><p>通過前面的範例我們可以瞭解到如何宣告變數，在宣告變數中另一個非常重要的部份便是 <strong>資料型態</strong> 。</p><p>先前提到過變數就是一個儲存資料的空間，而資料型態則決定了 <strong>這個空間能儲存的資料格式</strong> ，不同的資料型態也決定 <strong>空間的大小不同</strong> 。而變數的型態一但決定了，就無法被更改。</p><p>而在Java中有八種基本資料型態</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> s1<span class="token punctuation">;</span><span class="token comment">// 儲存整數的變數</span>
        <span class="token keyword">float</span> f1<span class="token punctuation">;</span><span class="token comment">// 儲存浮點樹的變數，可以理解為小數</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本資料型態" tabindex="-1"><a class="header-anchor" href="#基本資料型態" aria-hidden="true">#</a> 基本資料型態</h3><table><thead><tr><th>型態名稱</th><th>宣告</th><th>位元組(大小)</th><th>說明</th></tr></thead><tbody><tr><td>位元組</td><td>byte</td><td>1</td><td>-128~127之間的整數</td></tr><tr><td>短整數</td><td>short</td><td>2</td><td>-32768~32767之間的整數</td></tr><tr><td>整數</td><td>int</td><td>4</td><td>-2147483648~2147483647之間的整數(預設的整數型態)</td></tr><tr><td>長整數</td><td>long</td><td>8</td><td>-9223372036854775808~9223372036854775807</td></tr><tr><td>字元</td><td>char</td><td>2</td><td>16-bit Unicode字元</td></tr><tr><td>布林</td><td>boolean</td><td>1</td><td>true或false</td></tr><tr><td>單倍精準度浮點數</td><td>float</td><td>4</td><td>32-bit IEEE 754 浮點數格式，精確位數為7位</td></tr><tr><td>雙倍精準度浮點數</td><td>double</td><td>8</td><td>64-bit IEEE 754 浮點數格式，精確位數為15位(預設的浮點數型態)</td></tr></tbody></table><h3 id="參考資料型態" tabindex="-1"><a class="header-anchor" href="#參考資料型態" aria-hidden="true">#</a> 參考資料型態</h3><p>除了八大基本資料型態以外，其餘的變數類型都歸屬於參考資料型態；包含了 <strong>陣列、字串、自訂的各類類別等</strong> 。</p><p>參考資料型態就如字面上所述，是存一個指向物件的參考；通常這一類的物件我們無法確定具體的大小，因此我們會將其存在不同的記憶體區塊中， <strong>變數中只存該空間的參考位置</strong> 。</p><h2 id="java中的記憶體配置" tabindex="-1"><a class="header-anchor" href="#java中的記憶體配置" aria-hidden="true">#</a> Java中的記憶體配置</h2><p>在Java中的記憶體配置是有一套系統的，但細節較為複雜；我們可以簡單的拆成三大部分來做學習過程中的說明，分別是 <strong>靜態域、Stack(棧)、Heap(堆)</strong> 。</p><p>基本的概念如下:</p><figure><img src="`+e+`" alt="Java的記憶體配置" tabindex="0" loading="lazy"><figcaption>Java的記憶體配置</figcaption></figure><h2 id="變數的初始化" tabindex="-1"><a class="header-anchor" href="#變數的初始化" aria-hidden="true">#</a> 變數的初始化</h2><p>在Java中，變數可以在初始化時給予一個初始值，也能在需要使用前在賦予數值；而第一次給予數值的行為我們稱作 <strong>初始化</strong> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 宣告時便給予初始值</span>
        <span class="token keyword">boolean</span> boolean1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// boolean的數值為true/false</span>
        <span class="token keyword">float</span> float1 <span class="token operator">=</span> <span class="token number">3.23f</span><span class="token punctuation">;</span><span class="token comment">// java中的浮點數預設為double型態，因此需要標記為f告知其為float型態</span>
        <span class="token keyword">double</span> double1 <span class="token operator">=</span> <span class="token number">3.23</span><span class="token punctuation">;</span><span class="token comment">// double為預設型態，不需要做型別標記</span>
        <span class="token keyword">char</span> char1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span><span class="token comment">// 字元需要用單引號括起</span>
        
        <span class="token keyword">int</span> number2<span class="token punctuation">;</span>
        <span class="token comment">// ... do something</span>
        number2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// 也可以在宣告過後再給予初始值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上方的例子中，等號『=』為 <strong>賦值運算子</strong> ，用途為將右邊的數值存入左邊的變數中，如果變數中已經有數值則會被覆蓋。(注意! 並非數學中的相等意義)</p>`,24),c=[o];function i(d,l){return s(),a("div",null,c)}const u=n(p,[["render",i],["__file","index.html.vue"]]);export{u as default};
