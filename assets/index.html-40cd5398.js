import{_ as t,W as p,X as e,Z as a,Y as n,D as o}from"./framework-d3c6dbde.js";const c={},l=n('<h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹" aria-hidden="true">#</a> 介紹</h2><p>前一節我們提到了 if判斷式，但在許多程式場景之中，我們會需要更複雜的應用；當條件成立執行 A，不成立執行B，並且有多個條件等等。</p><p>因此我們需要 <strong>多重選擇結構</strong> ，其中我們會使用到的多重選擇結構主要有兩種</p><ul><li>if..else</li><li>switch</li></ul><h2 id="if-else-結構" tabindex="-1"><a class="header-anchor" href="#if-else-結構" aria-hidden="true">#</a> if-else 結構</h2><p>if-else結構從字面上就能理解，也就是除了if以外增加了else的情況；即 <strong>if 成立 &quot;執行 A&quot; ， else &quot;執行 B&quot;</strong></p><p>在流程上看起來如下</p>',7),i=n(`<p>在程式中看起來如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot; 相等於 &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot; 不等於 &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-elseif-else" tabindex="-1"><a class="header-anchor" href="#if-elseif-else" aria-hidden="true">#</a> if-elseif-else</h3><p>基於if-else延伸出的還有if-elseif，同樣的依照字面意思我們可以理解為 <strong>if 條件1成立 &quot;執行A&quot; else if 條件2成立 &quot;執行B&quot; else &quot;執行C&quot;</strong></p><p>值得注意的是，else if的判斷 <strong>一定是前一個判斷沒有成立才會進行判斷</strong> ，當有if加上多個else if時，必然是前面全部的判斷都沒有成立才會到當下的判斷中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> grade <span class="token operator">=</span> <span class="token number">74</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 成績大於等於90</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 成績介於80~89</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 成績介於70~79</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 成績介於60~69</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 全部都不成立時代表成績一定低於60</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),u=n(`<h2 id="switch-結構" tabindex="-1"><a class="header-anchor" href="#switch-結構" aria-hidden="true">#</a> switch 結構</h2><p>如果我們在多重選擇結構時，進行的判斷大多數都不是 <strong>範圍的判斷</strong> 而是 <strong>指定變數數值的判斷</strong> ，這時候我們通常會選擇使用 <strong>switch-case</strong> 來進行多重選擇判斷。</p><p>switch-case 常見的範例如，讓使用者輸入 1~3某一個選項，此時我們的進行的將是針對 <strong>使用者輸入的變數 =&gt; 數值1/2/3/的情況</strong> 的處理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> option <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 模擬使用者輸入2</span>
        
        <span class="token comment">// 小括號中不是放入判斷，而是要判斷的變數</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//大括號必須要加</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span> option <span class="token operator">==</span> <span class="token number">1</span>
                <span class="token comment">// 當使用者輸入的是1 就做...</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span> option <span class="token operator">==</span> <span class="token number">2</span>
                <span class="token comment">// 當使用者輸入的是2 就做...</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span> option <span class="token operator">==</span> <span class="token number">3</span>
                <span class="token comment">// 當使用者輸入的是3 就做...</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token comment">// 當是其他數值 就做...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果case結束後不加上break，將會繼續執行下一個case直到碰到break為止</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>default情況是可以不添加的，如果沒有添加則沒有符合case時不會進行任何處理</p></div>`,6);function r(k,d){const s=o("FlowChart");return p(),e("div",null,[l,a(s,{id:"flowchart-30",code:"eJzjKra1Ky5JLCqxUggGUVzJ+XkptnYgMrMkMz/PSuHZorlPdm972rHk2bTtXMmJtnb5BalFiRC5p70bnrbvUlCCqHnWMeH56m4lruQkPIqe7OiFqUu1tUvNS7FScM1L4eIq1gVbCrZfozK1WBPIT9S1S4UI5OWD+EkgPhcAX/NMkg==",preset:"vue"}),i,a(s,{id:"flowchart-45",code:"eJzjKra1Ky5JLCqxUggGUVzJ+XkphrZ2ICqzJDM/z0rBzlbB0gAsboQubgERN0YXN4eIm6CLmwHFgYbnF6QWJUIEn/ZueNq+S0HJUYkrGWg8FhknoAzQAiwyzkAZoBVYZFyAMqZYZVyVuLiKdcHOMoT4VaMytVgTKALj5uWDeCDfQvwMk4dx4fLGEL/D5GFcuLwJJAxg8jAuRN6UiwsAcHl/fg==",preset:"vue"}),u])}const m=t(c,[["render",r],["__file","index.html.vue"]]);export{m as default};
