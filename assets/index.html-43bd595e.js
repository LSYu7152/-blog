const n=JSON.parse('{"key":"v-3f24579a","path":"/java/050003/","title":"Game Loop - 遊戲核心建置","lang":"zh-TW","frontmatter":{"title":"Game Loop - 遊戲核心建置","date":"2021-03-23T17:28:25.000Z","permalink":"/java/050003/","category":["Java","Java遊戲開發"],"tag":["程式學習"],"order":3,"description":"遊戲核心建置 建立Canvas 因為JSwing本身提供的元件與工具更適合進行一般工具類應用的開發，在遊戲快速且頻繁的繪製下可能會有畫面撕裂等問題；因此我們會需要用到 雙緩衝機制 來避免此問題。 為了實現此機制，我們必須繼承畫布的類別並進行改寫來創建符合我們需求的畫布 import java.awt.*;// 我們需要繼承Canvas import java.awt.image.BufferStrategy;// 調用硬體的緩衝機制用的類 public class GameKernel extends Canvas { public void paint() { \\t// 當沒有緩衝機制時我們便調用方法創建 BufferStrategy bs = this.getBufferStrategy(); if (bs == null) { this.createBufferStrategy(3); return; } Graphics g = bs.getDrawGraphics();// 從BufferStrategy中取出Graphics 緩衝機制會自行判斷並進行Cache處理 g.fillRect(0, 0, this.getWidth(), this.getHeight());// 先畫一個跟畫布一樣大小的區塊 // 利用 Graphics 進行繪圖 g.setColor(Color.RED);// 將顏色設置為紅色 g.drawOval(50, 50, 150, 150);// 先繪製一個紅色橢圓形做測試 // end g.dispose();// 畫完之後釋放掉相關資源 bs.show();// 畫出畫面 } }","head":[["meta",{"property":"og:url","content":"https://www.ed-lin.com/java/050003/"}],["meta",{"property":"og:site_name","content":"Ed Log 工程人日誌"}],["meta",{"property":"og:title","content":"Game Loop - 遊戲核心建置"}],["meta",{"property":"og:description","content":"遊戲核心建置 建立Canvas 因為JSwing本身提供的元件與工具更適合進行一般工具類應用的開發，在遊戲快速且頻繁的繪製下可能會有畫面撕裂等問題；因此我們會需要用到 雙緩衝機制 來避免此問題。 為了實現此機制，我們必須繼承畫布的類別並進行改寫來創建符合我們需求的畫布 import java.awt.*;// 我們需要繼承Canvas import java.awt.image.BufferStrategy;// 調用硬體的緩衝機制用的類 public class GameKernel extends Canvas { public void paint() { \\t// 當沒有緩衝機制時我們便調用方法創建 BufferStrategy bs = this.getBufferStrategy(); if (bs == null) { this.createBufferStrategy(3); return; } Graphics g = bs.getDrawGraphics();// 從BufferStrategy中取出Graphics 緩衝機制會自行判斷並進行Cache處理 g.fillRect(0, 0, this.getWidth(), this.getHeight());// 先畫一個跟畫布一樣大小的區塊 // 利用 Graphics 進行繪圖 g.setColor(Color.RED);// 將顏色設置為紅色 g.drawOval(50, 50, 150, 150);// 先繪製一個紅色橢圓形做測試 // end g.dispose();// 畫完之後釋放掉相關資源 bs.show();// 畫出畫面 } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-TW"}],["meta",{"property":"og:updated_time","content":"2023-03-02T13:04:26.000Z"}],["meta",{"property":"article:tag","content":"程式學習"}],["meta",{"property":"article:published_time","content":"2021-03-23T17:28:25.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-02T13:04:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Game Loop - 遊戲核心建置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-23T17:28:25.000Z\\",\\"dateModified\\":\\"2023-03-02T13:04:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"遊戲核心建置","slug":"遊戲核心建置","link":"#遊戲核心建置","children":[{"level":3,"title":"建立Canvas","slug":"建立canvas","link":"#建立canvas","children":[]}]}],"git":{"createdTime":1677762266000,"updatedTime":1677762266000,"contributors":[{"name":"LSYu7152","email":"k1207152@gmail.com","commits":1}]},"readingTime":{"minutes":1.75,"words":525},"filePathRelative":"java/05.Java遊戲開發/03.Game Loop - 遊戲核心建置.md","localizedDate":"2021年3月24日","excerpt":"<h2> 遊戲核心建置</h2>\\n<h3> 建立Canvas</h3>\\n<p>因為JSwing本身提供的元件與工具更適合進行一般工具類應用的開發，在遊戲快速且頻繁的繪製下可能會有畫面撕裂等問題；因此我們會需要用到 <strong>雙緩衝機制</strong> 來避免此問題。</p>\\n<p>為了實現此機制，我們必須繼承畫布的類別並進行改寫來創建符合我們需求的畫布</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>awt<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 我們需要繼承Canvas</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>awt<span class=\\"token punctuation\\">.</span>image<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">BufferStrategy</span></span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 調用硬體的緩衝機制用的類</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">GameKernel</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Canvas</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">paint</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      \\n      \\t<span class=\\"token comment\\">// 當沒有緩衝機制時我們便調用方法創建</span>\\n        <span class=\\"token class-name\\">BufferStrategy</span> bs <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBufferStrategy</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>bs <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createBufferStrategy</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      \\n        <span class=\\"token class-name\\">Graphics</span> g <span class=\\"token operator\\">=</span> bs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getDrawGraphics</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 從BufferStrategy中取出Graphics 緩衝機制會自行判斷並進行Cache處理</span>\\n        g<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fillRect</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getWidth</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getHeight</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 先畫一個跟畫布一樣大小的區塊</span>\\n\\n        <span class=\\"token comment\\">// 利用 Graphics 進行繪圖</span>\\n        g<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setColor</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Color</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">RED</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 將顏色設置為紅色</span>\\n        g<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">drawOval</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">50</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">50</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">150</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">150</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 先繪製一個紅色橢圓形做測試</span>\\n        <span class=\\"token comment\\">// end</span>\\n        \\n        g<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispose</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 畫完之後釋放掉相關資源</span>\\n        bs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">show</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 畫出畫面</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
