import{_ as n,W as s,X as a,Y as t}from"./framework-d3c6dbde.js";const p="/img/java/array/arr_1.png",e="/img/java/array/arr_2.png",o={},c=t(`<h2 id="一維陣列" tabindex="-1"><a class="header-anchor" href="#一維陣列" aria-hidden="true">#</a> 一維陣列</h2><p>陣列是一種具有相同型態的元素集合，且是一段連續的記憶體空間，而這些元素本身通過 <strong>索引(index)</strong> 來作為存取的依據，而在陣列中的索引都是從 <strong>0</strong> 開始直到 <strong>長度-1</strong> 的位置。</p><p>在Java中，陣列事實上是一種<strong>特殊的物件</strong>，也因此在Java中，陣列不只能存放資料，還有著<strong>length</strong>的變數紀錄陣列的長度。同時因為陣列一旦宣告就不能再改變其長度，要調整陣列大小隻能重新創建。</p><h3 id="一維陣列的宣告" tabindex="-1"><a class="header-anchor" href="#一維陣列的宣告" aria-hidden="true">#</a> 一維陣列的宣告</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 陣列的宣告方式</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 創建長度為3且型態為int的一段空間，並將空間的位置存入arr變數中</span>
<span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 創建長度為5且型態為float的一段空間，並將空間的位置存入fArr變數中</span>
<span class="token comment">// 註: 陣列是一段連續的記憶體空間，存入arr的空間位置即陣列的空間的首地址</span>
<span class="token comment">//     在這個範例中僅會創建出一定長度的空間，並不會給予每個空間數值</span>
<span class="token comment">// 賦值</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 指定位置賦值</span>
<span class="token comment">//也可以利用迴圈進行</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 從0至長度-1依序給予1 2 3的數值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 陣列創建同時初始化的方式</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 創建的同時給予每一個空間數值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一維陣列的記憶體配置" tabindex="-1"><a class="header-anchor" href="#一維陣列的記憶體配置" aria-hidden="true">#</a> 一維陣列的記憶體配置</h3><figure><img src="`+p+`" alt="一維陣列的記憶體配置" tabindex="0" loading="lazy"><figcaption>一維陣列的記憶體配置</figcaption></figure><h2 id="二維陣列" tabindex="-1"><a class="header-anchor" href="#二維陣列" aria-hidden="true">#</a> 二維陣列</h2><p>二維陣列顧名思義，也就是能有 x 個 y長度的元素集合 的集合；可以理解為像是表格或是一個平面，有x行，同時每一行又有y個內容。</p><p>在Java之中，二維陣列事實上都是陣列的再引用；也就是說二維陣列事實上就是存放著『一維陣列』型態的一維陣列；也因為這種特性，使得Java的二維陣列中每一個一維陣列的長度是可以不固定的；也就是說 第一行可能只有三列，第二行卻有四列。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>C語言之中的二維陣列仍是一段連續的記憶體，並通過計算來分割第一維與第二維；因此在記憶體上的表現也不盡相同</p></div><h3 id="二維陣列的宣告" tabindex="-1"><a class="header-anchor" href="#二維陣列的宣告" aria-hidden="true">#</a> 二維陣列的宣告</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 二維陣列的宣告方式</span>
<span class="token comment">// 創建長度為3且存放一維陣列型態的陣列(arr)</span>
<span class="token comment">// arr中的每一格再創建為 長度為2且存放型態為int的一段空間 (類似於一維陣列)</span>
<span class="token comment">// 最後將二維陣列空間的位置存回arr變數中</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// --------</span>
<span class="token comment">// 創建長度為3 且存放一維陣列型態的陣列(iArr)</span>
<span class="token comment">// 有趣的是 每一格位置此時並沒有創建任何空間</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> iArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 我們可以為不同位置創建不同的長度</span>
iArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
iArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
iArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 註: 從程式碼中可以看出，事實上二維陣列中的每一格都是存放著一維陣列，因此也可以直接將其位置指向一維陣列，如下所示</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> testArr <span class="token operator">=</span> iArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二維陣列的記憶體配置" tabindex="-1"><a class="header-anchor" href="#二維陣列的記憶體配置" aria-hidden="true">#</a> 二維陣列的記憶體配置</h3><figure><img src="`+e+'" alt="二維陣列的記憶體配置" tabindex="0" loading="lazy"><figcaption>二維陣列的記憶體配置</figcaption></figure><p>Java中的二維陣列形式讓我們可以簡單創建一維長度不同的二維陣列，同時也能更靈活的調整大小；但在訪問速度以及記憶體的利用效率上，仍然是C語言的連續記憶體形式會更好。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>更多維度的陣列依然可以用相同的概念與語法去創建，但通常我們較少使用到此處便不做示範。</p></div>',18),i=[c];function l(r,u){return s(),a("div",null,i)}const d=n(o,[["render",l],["__file","index.html.vue"]]);export{d as default};
