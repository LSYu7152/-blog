import{_ as n,W as s,X as a,Y as t}from"./framework-d3c6dbde.js";const p={},e=t(`<h2 id="為何需要string-pool" tabindex="-1"><a class="header-anchor" href="#為何需要string-pool" aria-hidden="true">#</a> 為何需要String pool</h2><p>在Java中，String物件一但建立就無法改變(只能指向新的字串)，且在程式之中，String占用記憶體非常大。</p><p>因此將String使用物件池方式來管理的收益非常高。</p><p>通過 <strong>字串池(String pool)</strong> 我們可以使相同字串得以被重複利用，以進一步達到節省空間的目的。</p><h2 id="字串池在java中的演進" tabindex="-1"><a class="header-anchor" href="#字串池在java中的演進" aria-hidden="true">#</a> 字串池在Java中的演進</h2><h3 id="java-6及之前" tabindex="-1"><a class="header-anchor" href="#java-6及之前" aria-hidden="true">#</a> Java 6及之前</h3><p>在舊版的Java中，String Pool是放在 <strong>永久代(Permgen)</strong> 之中，且呼叫 <a href="#intern%E6%96%B9%E6%B3%95">String.intern()</a> 方法時，會將String的物件從Heap中拷貝一份放入Permgen，這樣會導致Permgen記憶體溢出(Out of memory)，因為Permgen的容量是有限且執行時期不變的。</p><h3 id="java7" tabindex="-1"><a class="header-anchor" href="#java7" aria-hidden="true">#</a> Java7</h3><p>Java 7後，String pool 移出了 Permgen，直接放在堆之中；因此字串就不會被限制於固定的記憶體中。</p><p>且 intern() 方法也不再是拷貝一份物件，而是在字串池中引用已經產生的字串物件；且如果池化的字串超過範圍並不再被引用時，是可以被GC的。</p><h3 id="java-8與之後" tabindex="-1"><a class="header-anchor" href="#java-8與之後" aria-hidden="true">#</a> Java 8與之後</h3><p>Java 8 之中(準確說是7u40後)，將String Table Size預設值提升到了60013。</p><p>值得一提的是，Java 8之後已經完全移除了 永久代(Permgen) 改由 <strong>Meta Space(元空間)</strong> 替代。</p><h2 id="string-pool-詳解" tabindex="-1"><a class="header-anchor" href="#string-pool-詳解" aria-hidden="true">#</a> String Pool 詳解</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><p>讓我們先看一段範例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 手動new出字串實體</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>從上方範例可看出使用 <strong>==</strong> 做比較跟我們預期之中的結果並不相同，原因是 <strong>字串是參考資料型態</strong> 因此 == 會 <strong>進行記憶體位址的比較</strong> ，而 a 與 b 的記憶體位址相同，但 c 卻不同。</p><p>造成a與b記憶體位址相同的原因就是 <strong>字串池(String Pool)</strong> ；字串池的目的是讓 <strong>編譯時期就已經確定的字串</strong> 可以被重複利用，而不是重複創造相同字串浪費記憶體空間。</p><p>因此我們再看一次範例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span><span class="token comment">// 先在Heap創建一個&quot;Hello&quot; 並在字串池中加入引用</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span><span class="token comment">// 因為字串池中已經有相同的字串，不會重複創建</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 強迫在Heap中創建另一個&quot;Hello&quot;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a和b指向的記憶體位址相同 =&gt; true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b和c指向的記憶體位址不同 =&gt; false</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b和c的內容字串相同 =&gt; true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通過Scanner讓使用者輸入得到的字串也不會在字串池中被引用!</p></div><h3 id="延伸觀念" tabindex="-1"><a class="header-anchor" href="#延伸觀念" aria-hidden="true">#</a> 延伸觀念</h3><p>首先同樣先讓我們看一段範例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> <span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> d <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> e <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> f <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>

<span class="token comment">// 印出每一個字串的實際位址</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1163157884</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1956725890</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 356573597</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 356573597</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1735600054</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 356573597</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>String類別中覆寫了hashCode方法(根據字元序列計算)，identityHashCode為靜態方法(根據記憶體地址來計算)</p></div><p>在上方的範例中，a/b/c變數都如同基礎概念中提過的會被加入到字串池中，而d/e/f變數則牽扯到了字串的串接。</p><ol><li>在字串的串接中如果都是 <strong>常數字串(雙引號包裹的一般文字)</strong> ，則編譯時期JVM會自動優化視為一個整體的字串判定，因此會與 c變數位址相同(同為字串池中的引用)</li><li>在字串的串接中如果包含 <strong>變數</strong> ，則編譯器無法確認串接後的內容，因此並不會進入字串池引用判斷。</li><li>在字串的串接中如果包含 <strong>final修飾的變數</strong> ，final變數相當於常數，因此編譯時期JVM依然能確定b的值。</li></ol><h2 id="intern方法" tabindex="-1"><a class="header-anchor" href="#intern方法" aria-hidden="true">#</a> intern方法</h2><p>如果我們希望能確認執行時期得到的字串是否在字串池中已經包含，就會使用到intern方法。</p><p>intern方法的作用是回傳一個字串在字串池之中的引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> c <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 將b丟入，會得到與a相同的引用</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false =&gt; 位址不同</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true =&gt; 位址相同</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1163157884</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1956725890</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1163157884</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","index.html.vue"]]);export{k as default};
