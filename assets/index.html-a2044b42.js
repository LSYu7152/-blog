const n=JSON.parse('{"key":"v-3f24571e","path":"/java/050005/","title":"Game Loop - 邏輯迴圈","lang":"zh-TW","frontmatter":{"title":"Game Loop - 邏輯迴圈","date":"2021-03-23T14:11:53.000Z","permalink":"/java/050005/","category":["Java","Java遊戲開發"],"tag":["程式學習"],"order":5,"description":"遊戲中的邏輯迴圈 如同介紹遊戲主迴圈的章節中所述，我們在設計邏輯迴圈時應該要保證邏輯的運算不會遺漏；因此，如果邏輯更新的部分因為時間所延誤的話我們應該要補上缺漏的次數再進行下一個動作。 迴圈上控制邏輯更新次數 請注意閱讀下列註解中的說明， 繪圖的部分註解方便關注於邏輯更新的部分 import java.awt.*; import java.awt.image.BufferStrategy; public class GameKernel extends Canvas { // private int fps; private int ups;// 每秒預期的遊戲更新次數(可以與畫面更新次數不同) public GameKernel(int fps, int ups) { // this.fps = fps; this.ups = ups;// 從建構子中帶入 } public void run() { // long nanoSecondPerFrame = 1000000000L / this.fps; long nanoSecondPerUpdate = 1000000000L / this.ups; // long lastRepaintTime = System.nanoTime(); long startTime = System.nanoTime();// 開始執行遊戲時的時間 long passedUpdated = 0;// 實際上已經更新過的次數 while (true) { long currentTime = System.nanoTime();// 系統當前時間 long totalTime = currentTime - startTime;// 從開始到現在經過的時間 long targetTotalUpdated = totalTime / (nanoSecondPerUpdate);// 開始到現在應該更新的次數 while (passedUpdated &lt; targetTotalUpdated) {// 如果當前經過的次數小於實際應該要更新的次數 this.update();//update 更新 passedUpdated++;// 每次更新就刷新更新後的次數 } // if (currentTime - lastRepaintTime &gt;= nanoSecondPerFrame) { // lastRepaintTime = currentTime; // this.paint(); // } } } private void update() { // 遊戲更新需要做的事情 } private void paint() { BufferStrategy bs = this.getBufferStrategy(); if (bs == null) { this.createBufferStrategy(3); return; } Graphics g = bs.getDrawGraphics(); g.fillRect(0, 0, this.getWidth(), this.getHeight()); // 利用 Graphics 進行繪圖 g.setColor(Color.RED); g.drawOval(50, 50, 150, 150); // end g.dispose(); bs.show(); } }","head":[["meta",{"property":"og:url","content":"https://www.ed-lin.com/java/050005/"}],["meta",{"property":"og:site_name","content":"Ed Log 工程人日誌"}],["meta",{"property":"og:title","content":"Game Loop - 邏輯迴圈"}],["meta",{"property":"og:description","content":"遊戲中的邏輯迴圈 如同介紹遊戲主迴圈的章節中所述，我們在設計邏輯迴圈時應該要保證邏輯的運算不會遺漏；因此，如果邏輯更新的部分因為時間所延誤的話我們應該要補上缺漏的次數再進行下一個動作。 迴圈上控制邏輯更新次數 請注意閱讀下列註解中的說明， 繪圖的部分註解方便關注於邏輯更新的部分 import java.awt.*; import java.awt.image.BufferStrategy; public class GameKernel extends Canvas { // private int fps; private int ups;// 每秒預期的遊戲更新次數(可以與畫面更新次數不同) public GameKernel(int fps, int ups) { // this.fps = fps; this.ups = ups;// 從建構子中帶入 } public void run() { // long nanoSecondPerFrame = 1000000000L / this.fps; long nanoSecondPerUpdate = 1000000000L / this.ups; // long lastRepaintTime = System.nanoTime(); long startTime = System.nanoTime();// 開始執行遊戲時的時間 long passedUpdated = 0;// 實際上已經更新過的次數 while (true) { long currentTime = System.nanoTime();// 系統當前時間 long totalTime = currentTime - startTime;// 從開始到現在經過的時間 long targetTotalUpdated = totalTime / (nanoSecondPerUpdate);// 開始到現在應該更新的次數 while (passedUpdated &lt; targetTotalUpdated) {// 如果當前經過的次數小於實際應該要更新的次數 this.update();//update 更新 passedUpdated++;// 每次更新就刷新更新後的次數 } // if (currentTime - lastRepaintTime &gt;= nanoSecondPerFrame) { // lastRepaintTime = currentTime; // this.paint(); // } } } private void update() { // 遊戲更新需要做的事情 } private void paint() { BufferStrategy bs = this.getBufferStrategy(); if (bs == null) { this.createBufferStrategy(3); return; } Graphics g = bs.getDrawGraphics(); g.fillRect(0, 0, this.getWidth(), this.getHeight()); // 利用 Graphics 進行繪圖 g.setColor(Color.RED); g.drawOval(50, 50, 150, 150); // end g.dispose(); bs.show(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-TW"}],["meta",{"property":"og:updated_time","content":"2023-03-02T13:04:26.000Z"}],["meta",{"property":"article:tag","content":"程式學習"}],["meta",{"property":"article:published_time","content":"2021-03-23T14:11:53.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-02T13:04:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Game Loop - 邏輯迴圈\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-23T14:11:53.000Z\\",\\"dateModified\\":\\"2023-03-02T13:04:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"遊戲中的邏輯迴圈","slug":"遊戲中的邏輯迴圈","link":"#遊戲中的邏輯迴圈","children":[]},{"level":2,"title":"迴圈上控制邏輯更新次數","slug":"迴圈上控制邏輯更新次數","link":"#迴圈上控制邏輯更新次數","children":[]},{"level":2,"title":"章節小結","slug":"章節小結","link":"#章節小結","children":[]}],"git":{"createdTime":1677762266000,"updatedTime":1677762266000,"contributors":[{"name":"LSYu7152","email":"k1207152@gmail.com","commits":1}]},"readingTime":{"minutes":2.02,"words":606},"filePathRelative":"java/05.Java遊戲開發/05.Game Loop - 邏輯處理.md","localizedDate":"2021年3月23日","excerpt":"<h2> 遊戲中的邏輯迴圈</h2>\\n<p>如同介紹<a href=\\"/java/4a21a4\\">遊戲主迴圈的章節</a>中所述，我們在設計邏輯迴圈時應該要保證邏輯的運算不會遺漏；因此，如果邏輯更新的部分因為時間所延誤的話我們應該要補上缺漏的次數再進行下一個動作。</p>\\n<h2> 迴圈上控制邏輯更新次數</h2>\\n<p>請注意閱讀下列註解中的說明， <strong>繪圖的部分註解方便關注於邏輯更新的部分</strong></p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>awt<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>awt<span class=\\"token punctuation\\">.</span>image<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">BufferStrategy</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">GameKernel</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Canvas</span> <span class=\\"token punctuation\\">{</span>\\n\\n<span class=\\"token comment\\">//        private int fps;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> ups<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 每秒預期的遊戲更新次數(可以與畫面更新次數不同)</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">GameKernel</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> fps<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> ups<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        this.fps = fps;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>ups <span class=\\"token operator\\">=</span> ups<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 從建構子中帶入</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//        long nanoSecondPerFrame = 1000000000L / this.fps;</span>\\n        <span class=\\"token keyword\\">long</span> nanoSecondPerUpdate <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1000000000L</span> <span class=\\"token operator\\">/</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>ups<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//        long lastRepaintTime = System.nanoTime();</span>\\n\\n        <span class=\\"token keyword\\">long</span> startTime <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">nanoTime</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 開始執行遊戲時的時間</span>\\n        <span class=\\"token keyword\\">long</span> passedUpdated <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 實際上已經更新過的次數</span>\\n\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">long</span> currentTime <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">nanoTime</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 系統當前時間</span>\\n            <span class=\\"token keyword\\">long</span> totalTime <span class=\\"token operator\\">=</span> currentTime <span class=\\"token operator\\">-</span> startTime<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 從開始到現在經過的時間</span>\\n            <span class=\\"token keyword\\">long</span> targetTotalUpdated <span class=\\"token operator\\">=</span> totalTime <span class=\\"token operator\\">/</span> <span class=\\"token punctuation\\">(</span>nanoSecondPerUpdate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 開始到現在應該更新的次數</span>\\n            \\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>passedUpdated <span class=\\"token operator\\">&lt;</span> targetTotalUpdated<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">// 如果當前經過的次數小於實際應該要更新的次數</span>\\n                <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">update</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//update 更新</span>\\n                passedUpdated<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 每次更新就刷新更新後的次數</span>\\n            <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//            if (currentTime - lastRepaintTime &gt;= nanoSecondPerFrame) {</span>\\n<span class=\\"token comment\\">//                lastRepaintTime = currentTime;</span>\\n<span class=\\"token comment\\">//                this.paint();</span>\\n<span class=\\"token comment\\">//            }</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">update</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 遊戲更新需要做的事情</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">paint</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">BufferStrategy</span> bs <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBufferStrategy</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>bs <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createBufferStrategy</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token class-name\\">Graphics</span> g <span class=\\"token operator\\">=</span> bs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getDrawGraphics</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        g<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">fillRect</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getWidth</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getHeight</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 利用 Graphics 進行繪圖</span>\\n        g<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setColor</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Color</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">RED</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        g<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">drawOval</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">50</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">50</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">150</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">150</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// end</span>\\n\\n        g<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispose</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        bs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">show</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
