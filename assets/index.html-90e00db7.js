import{_ as n,W as a,X as s,Y as t}from"./framework-d3c6dbde.js";const p={},e=t(`<h2 id="java中的錯誤" tabindex="-1"><a class="header-anchor" href="#java中的錯誤" aria-hidden="true">#</a> Java中的錯誤</h2><p>Java針對常見錯誤定義了不同的類別這些類別都繼承自 <strong>java.lang.Throwable</strong></p><p>而Throwable由兩大類所繼承，分別為</p><ul><li>java.lang.Exception類別</li><li>java.lang.Error類別</li></ul><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> Error</h3><p>只要繼承至java.lang.Error的類別，通常就代表極嚴重的錯誤；此類錯誤發生時，JVM會丟出 Error物件，而這類型的錯誤是無法被當作例外來進行處理的。如： <strong>java.lang.OutOfMemoryError</strong></p><h2 id="什麼是例外處理" tabindex="-1"><a class="header-anchor" href="#什麼是例外處理" aria-hidden="true">#</a> 什麼是例外處理</h2><p>例外狀況是指<strong>執行時期</strong>的錯誤；</p><p>執行時期的錯誤通常是在執行時的變因而產生的，較難完全檢查，因此我們使用例外處理來對 <strong>預期之外發生的錯誤</strong> 導致無法繼續執行的情況進行處理。</p><h2 id="例外的引發" tabindex="-1"><a class="header-anchor" href="#例外的引發" aria-hidden="true">#</a> 例外的引發</h2><p>例外的引發可以分為兩種：</p><ul><li><p><strong>由系統自動引發</strong></p><p>​ 對於Java內建的例外類別，如果任一種例外發生，就會產生一個例外物件，並將之傳給執行時期系統。</p><p>​ 系統會自動尋找負責處理該例外的程式碼並執行。</p></li><li><p><strong>透過throw敘述引發</strong></p></li></ul><h2 id="例外的處理" tabindex="-1"><a class="header-anchor" href="#例外的處理" aria-hidden="true">#</a> 例外的處理</h2><p>Java處理例外狀況分為四項：</p><ul><li>Try(測試)</li><li>Throw(丟出)</li><li>Catch(抓取並處理)</li><li>Finally</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>throw是用來丟出例外。 而其他三項則是一個特殊的敘述，稱之為 try…catch…[finally…]敘述</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>finally部分不一定存在，它的功用則是「不論例外是否發生，都一定會執行的敘述區塊」。</p></div><h3 id="throw-敘述" tabindex="-1"><a class="header-anchor" href="#throw-敘述" aria-hidden="true">#</a> Throw 敘述</h3><p>先看一段範例程式碼</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;這一行會被執行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;陣列大小出現負數&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">int</span> ary<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//這一行不會被執行</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;這一行不會被執行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>當我們在撰寫一個功能時，有可能會發生預期外的結果，並且我們希望使用這個方法的人去處理這個例外；我們便會 <strong>拋出一個例外</strong> 。</p><p>Throw敘述就是將可能會發生的例外丟出給使用此功能的人處理的一個方式。</p><h3 id="try-catch-敘述" tabindex="-1"><a class="header-anchor" href="#try-catch-敘述" aria-hidden="true">#</a> Try/Catch 敘述</h3><p>如果我們是使用功能的人，而且不選擇把例外繼續往外丟給其他人去處理；此時我們便會使用 <strong>Try/Catch</strong> 來進行例外的處理。</p><p>Try/Catch的寫法先看一段範例程式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
	<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// test之中可能會發生某種 IO例外</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// e是例外的實體，可以用來取得例外訊息等</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在一個try的區塊中，也可以catch多個不同的例外；catch不同種例外的方式有兩種，分別為：</p><ol><li><p>利用 | 符號分隔不同種類的例外來抓取</p><p>​ 通常這種方式用於不同種例外卻用相同的處理方式時</p></li><li><p>利用多個catch區塊來抓取(類似於if/else if)</p><p>​ 針對不同種例外有不同處理方式時的手段</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
<span class="token comment">//預期可能會發生例外的敘述</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span> 例外類別<span class="token number">1</span> <span class="token operator">|</span> 例外類別<span class="token number">2</span> <span class="token operator">|</span>… 例外物件名稱<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//對應的處理程序</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span> 例外類別<span class="token number">3</span> 例外物件名稱<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//對應的處理程序</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="finally-敘述" tabindex="-1"><a class="header-anchor" href="#finally-敘述" aria-hidden="true">#</a> Finally 敘述</h3><p>finally 區塊不管try之中是否發生任何例外，都一定會在最後執行。通常finally區塊不會使用到；主要的用途為釋放try區塊中的一些資源，為了避免例外發生時資源沒有正確被釋放，通常我們會利用finally來處理這類資源釋放的操作。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>就算try/catch中有return指令，最後仍然還是會執行finally區塊</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 印出0，因為finally區塊最後一定會被執行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),c=[e];function o(i,l){return a(),s("div",null,c)}const r=n(p,[["render",o],["__file","index.html.vue"]]);export{r as default};
