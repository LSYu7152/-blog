import{_ as n,W as s,X as a,Y as p}from"./framework-d3c6dbde.js";const t="/img/java/game/1/test_paint.png",e={},c=p(`<h2 id="遊戲核心建置" tabindex="-1"><a class="header-anchor" href="#遊戲核心建置" aria-hidden="true">#</a> 遊戲核心建置</h2><h3 id="建立canvas" tabindex="-1"><a class="header-anchor" href="#建立canvas" aria-hidden="true">#</a> 建立Canvas</h3><p>因為JSwing本身提供的元件與工具更適合進行一般工具類應用的開發，在遊戲快速且頻繁的繪製下可能會有畫面撕裂等問題；因此我們會需要用到 <strong>雙緩衝機制</strong> 來避免此問題。</p><p>為了實現此機制，我們必須繼承畫布的類別並進行改寫來創建符合我們需求的畫布</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">// 我們需要繼承Canvas</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span></span><span class="token class-name">BufferStrategy</span></span><span class="token punctuation">;</span><span class="token comment">// 調用硬體的緩衝機制用的類</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameKernel</span> <span class="token keyword">extends</span> <span class="token class-name">Canvas</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
      	<span class="token comment">// 當沒有緩衝機制時我們便調用方法創建</span>
        <span class="token class-name">BufferStrategy</span> bs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBufferStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createBufferStrategy</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      
        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> bs<span class="token punctuation">.</span><span class="token function">getDrawGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 從BufferStrategy中取出Graphics 緩衝機制會自行判斷並進行Cache處理</span>
        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先畫一個跟畫布一樣大小的區塊</span>

        <span class="token comment">// 利用 Graphics 進行繪圖</span>
        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 將顏色設置為紅色</span>
        g<span class="token punctuation">.</span><span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先繪製一個紅色橢圓形做測試</span>
        <span class="token comment">// end</span>
        
        g<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 畫完之後釋放掉相關資源</span>
        bs<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 畫出畫面</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Graphics物件是繪圖用物件，其中提供了繪製各種圖形、線條、圖片、文字的方法</p></div><p>回到主程式，我們需要注意的是因為雙緩衝機制，我們必須多次進行繪製才能看出效果(第一次繪製並未建立緩衝機制的話方法會直接return)；因此我們做個簡單的無窮迴圈讓程式不停進行繪製</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JFrame</span> jFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jFrame<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;Game&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jFrame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jFrame<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jFrame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span><span class="token constant">EXIT_ON_CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">GameKernel</span> gameKernel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameKernel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 創建畫布</span>
        jFrame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gameKernel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 將畫布加入視窗中</span>

        jFrame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	<span class="token comment">// 在無窮迴圈中不停進行繪製</span>
            gameKernel<span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成後我們會看到以下畫面</p><figure><img src="`+t+'" alt="Test Paint" tabindex="0" loading="lazy"><figcaption>Test Paint</figcaption></figure><p>至此我們已經完成一個基本的繪圖機制；接下來會教大家如何創建遊戲的主迴圈。</p>',11),o=[c];function l(i,u){return s(),a("div",null,o)}const r=n(e,[["render",l],["__file","index.html.vue"]]);export{r as default};
