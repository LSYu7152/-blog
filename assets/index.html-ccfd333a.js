import{_ as a,W as i,X as r,Y as t}from"./framework-d3c6dbde.js";const e={},n=t('<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言" aria-hidden="true">#</a> 一、前言</h2><p>最近新聞、Youtube、各種Blog都充斥著不同的AI文章，隨便都可以找到各種各式各樣的AI的工具使用教學、AI對工作的衝擊等等；相信大家對於這類的文章也感到有趣好用，但也會有些擔心是不是未來會因為這些AI應用造成一堆人失業流落街頭。所以在這我們將探討一下 <strong>工程師</strong> 這個行業是否可能受到AI衝擊的影響。</p><h2 id="二、ai工具應用於軟體開發領域的現況" tabindex="-1"><a class="header-anchor" href="#二、ai工具應用於軟體開發領域的現況" aria-hidden="true">#</a> 二、AI工具應用於軟體開發領域的現況</h2><p>扣除當前正火熱的ChatGPT，在程式開發的領域上Copilot在2021就已經出世並有不俗的表現。但無論是何者都具備將自然語言敘述轉成程式碼的能力。</p><h4 id="一個簡單的軟體開發過程可以拆分成三個部分" tabindex="-1"><a class="header-anchor" href="#一個簡單的軟體開發過程可以拆分成三個部分" aria-hidden="true">#</a> 一個簡單的軟體開發過程可以拆分成三個部分：</h4><ul><li><strong>釐清用戶的需求轉為功能、系統</strong>：舉例來說，”使用者可以設定條件搜尋有哪些工作”–轉換–&gt;”多重篩選器、搜尋功能”</li><li><strong>將功能、系統拆解成明確的程式問題(具有明確的輸入輸出)</strong>：舉例來說，”搜尋功能”–轉換–&gt;”擷取使用者輸入的文字(輸入) 呼叫API(過程) 並取得搜尋結果(輸出)”</li><li><strong>將明確的程式問題編寫為程式碼</strong></li></ul><hr><h4 id="以ai工具的現況來看上述三個部分" tabindex="-1"><a class="header-anchor" href="#以ai工具的現況來看上述三個部分" aria-hidden="true">#</a> 以AI工具的現況來看上述三個部分：</h4><ul><li><p><strong>釐清需求轉為功能、系統</strong> =&gt; AI工具目前還做不到這點</p></li><li><p><strong>將功能或系統拆解成明確的程式問題</strong> =&gt; AI工具目前還做不到這點</p></li><li><p><strong>將明確的程式問題編寫為程式碼</strong> =&gt; AI工具已經做得到，並且可能還做得不錯</p></li></ul><hr><p>雖然實際的應用場景中，我們可能還需要撰寫測試、考量未來需求或功能的下一步變化以調整程式的寫法或結構等等。 但我們已知的是<strong>不遠的未來AI工具很快就能做到在問題清晰的情況下快速有效的產出程式碼</strong>。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>足夠複雜的演算法問題就算有明確定義AI目前看起來仍是無法處理的；且有多種解法的問題仍需要人進行前後文的判斷來決定作法。</p></div><h2 id="三、當前ai對於軟體工程師工作內容的影響以及可能性" tabindex="-1"><a class="header-anchor" href="#三、當前ai對於軟體工程師工作內容的影響以及可能性" aria-hidden="true">#</a> 三、當前AI對於軟體工程師工作內容的影響以及可能性</h2><p>依照前一節的結論來看，AI工具目前在搜尋網路資源並整合給出答案這塊做得非常高明，就如同進化過的強化搜尋引擎。過去網路上許多人會說「比起程式寫得好，不如資料查的好」，而AI工具的出現則是直接讓所有人都可以很輕易的把資料查好。</p><h4 id="接著我們來拆分目前軟體工程師各個職能狀態可能的工作內容" tabindex="-1"><a class="header-anchor" href="#接著我們來拆分目前軟體工程師各個職能狀態可能的工作內容" aria-hidden="true">#</a> 接著我們來拆分目前軟體工程師各個職能狀態可能的工作內容：</h4><ul><li><p><strong>架構師、主任工程師以上</strong>：考慮產品的前後文並依照未來可能的發展去設計規劃功能與系統</p></li><li><p><strong>資深工程師</strong>：將功能與系統定義為明確的程式問題，並針對無法定義的問題提供有效的替代方案</p></li><li><p><strong>軟體工程師</strong>：將明確的程式問題編寫為程式碼，面對無法解決的問題要有能力搜尋解決方案並處理問題。</p></li></ul><hr><p>上述是一個簡單的粗略職務拆分，很顯然就如同ChatGPT自己所說，AI工具可能會對較基層的崗位造成影響，但不會完全替代工程師；因此如果軟體工程師仍停留在依靠Google、Stackoverflow解決問題以及快速拼湊答案的階段那將很快會被淘汰。而我們也應持續的關注AI的下一步進展來不斷調整我們成長的方向和腳步。</p><h2 id="四、結論" tabindex="-1"><a class="header-anchor" href="#四、結論" aria-hidden="true">#</a> 四、結論</h2><p>未來軟體工程師可能會被AI所取代，但我們仍需要讓新生代能累積經驗和技巧才能成長出更多的資深工程師、架構師們。 因此接下來的Junior應該更著重在AI工具仍無法有效達成的幾個面向上去學習：</p><ol><li>評估當前場景適合的作法與寫法</li><li>具有更廣且完備的基礎知識才能給予AI正確的指令</li><li>就如同搜尋引擎出來的時代，我們會減少去背誦大量資料，轉為更多的去整理資料、吸收知識一樣；在AI的時代我們將可能是減少整理資料，轉為吸收知識以及學習評估與判斷。</li></ol><p>我是這麼理解：如果不想被AI取代，就要學會做AI的小主管。</p><p>接下來我們有必要調整自己學習的方向以及學習的方式，更注重在基礎知識的累積以及程式做法的判斷與評估上；才不會因AI工具的猛烈興起被打的猝不及防。</p><p>而已經是資深工程師們的各位則應認真看待自己目前撰寫程式的手段，並重視自己在程式架構判斷、做法的評估與分析、程式的基礎知識累積上是否做好準備工作。</p>',24),o=[n];function l(h,s){return i(),r("div",null,o)}const p=a(e,[["render",l],["__file","index.html.vue"]]);export{p as default};
