import{_ as n,W as s,X as a,Y as t}from"./framework-d3c6dbde.js";const p={},e=t(`<h2 id="什麼是列舉" tabindex="-1"><a class="header-anchor" href="#什麼是列舉" aria-hidden="true">#</a> 什麼是列舉</h2><p>在Java中，時常會碰到需要指定傳入特定幾種數值的情況，如: 顏色, 種類 等。過往可能會使用常數來進行這些數值的定義，但常數仍無法實質上的限制外部開發者依照我們的需要傳入確切的數值。</p><p>而 <strong>列舉(Enum)</strong> 是一個可以將 <strong>常數組織起來進行統一管理</strong> 的方式。</p><h3 id="列舉的本質" tabindex="-1"><a class="header-anchor" href="#列舉的本質" aria-hidden="true">#</a> 列舉的本質</h3><p><strong>列舉(Enum)</strong> 本身也是一個類別，在我們使用enum語法，事實上編譯器會協助我們建立一個繼承至Enum的類別</p><p>Enum類的宣告(其中會使用到泛型語法，會在之後的篇幅介紹)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span> 
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>直接撰寫程式繼承Enum類別會被編譯器拒絕</p></div><h2 id="列舉的基本使用" tabindex="-1"><a class="header-anchor" href="#列舉的基本使用" aria-hidden="true">#</a> 列舉的基本使用</h2><h3 id="列舉中提供的方法" tabindex="-1"><a class="header-anchor" href="#列舉中提供的方法" aria-hidden="true">#</a> 列舉中提供的方法</h3><p>enum類之中預設就提供了幾種方法</p><ul><li>values() : 可以將enum中的元素以陣列形式回傳</li><li>name() : 返回enum中特定元素的名稱</li><li>ordinal() : 返回enum中特定元素在該列舉中的位置(從0開始)</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以使用 == 來比較相同列舉之中的元素</p></div><p>以下是幾種方法的範例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token class-name">Test<span class="token punctuation">.</span>A</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test name: &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test ordinal: &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test 與 Test.A equals: &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Test<span class="token punctuation">.</span>A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test 與 Test.B equals: &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Test<span class="token punctuation">.</span>B</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test 與 Test.A compareTo: &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Test<span class="token punctuation">.</span>A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test 與 Test.B compareTo: &quot;</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Test<span class="token punctuation">.</span>B</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
        <span class="token class-name">A</span><span class="token punctuation">,</span>
        <span class="token class-name">B</span><span class="token punctuation">,</span>
        <span class="token class-name">C</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/* output
test name: A
test ordinal: 0
test 與 Test.A equals: true
test 與 Test.B equals: false
test 與 Test.A compareTo: 0
test 與 Test.B compareTo: -1
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列舉的使用" tabindex="-1"><a class="header-anchor" href="#列舉的使用" aria-hidden="true">#</a> 列舉的使用</h3><p>使用列舉時，就如同呼叫類別中的變數一樣，我們需要使用 <strong>類別名稱.元素</strong> 來調用列舉中的指令數值；並使用 <strong>類別名稱</strong> 來宣告列舉變數</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Rect</span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 傳入Color中的GREEN元素</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
        <span class="token constant">GREEN</span><span class="token punctuation">,</span>
        <span class="token constant">BLUE</span><span class="token punctuation">,</span>
        <span class="token constant">RED</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Rect</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span><span class="token comment">// 定義Color類別的變數</span>

        <span class="token keyword">public</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token class-name">Color</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列舉的進階應用" tabindex="-1"><a class="header-anchor" href="#列舉的進階應用" aria-hidden="true">#</a> 列舉的進階應用</h2><h3 id="列舉中擴充方法" tabindex="-1"><a class="header-anchor" href="#列舉中擴充方法" aria-hidden="true">#</a> 列舉中擴充方法</h3><p>前面篇幅有提到列舉的本質事實上是創建一個類別繼承Enum類，因此我們可以去擴充修改其中的方法。</p><p>在enum之中，可以新增 <strong>一般方法、抽象方法、靜態方法、建構子</strong> 。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果要新增方法，enum的元素中最後一項必須要加上分號結尾，且元素宣告必須要在最前面</p></div><h4 id="建構子" tabindex="-1"><a class="header-anchor" href="#建構子" aria-hidden="true">#</a> 建構子</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">&quot;#00FF00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 傳入對應的code到建構子中</span>
    <span class="token function">BLUE</span><span class="token punctuation">(</span><span class="token string">&quot;#0000FF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">&quot;#FF0000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>

    <span class="token comment">// 使用private 因為外部不會創建Color元素</span>
    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一般方法與靜態方法" tabindex="-1"><a class="header-anchor" href="#一般方法與靜態方法" aria-hidden="true">#</a> 一般方法與靜態方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">&quot;#00FF00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">BLUE</span><span class="token punctuation">(</span><span class="token string">&quot;#0000FF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">&quot;#FF0000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 一般方法</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 為了示範而示範的靜態方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token class-name">Color</span> color<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> color<span class="token punctuation">.</span>code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽象方法" tabindex="-1"><a class="header-anchor" href="#抽象方法" aria-hidden="true">#</a> 抽象方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    <span class="token comment">// 每一個Color都必須得實作抽象方法</span>
    <span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用匿名內部類別的形式實現了抽象方法</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;00FF00&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">BLUE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;0000FF&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;FF0000&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 宣告了Color必須有一個抽象方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由抽象方法的例子可看出每一個Color的元素其實都是Color的子類別</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Enum不可以進行繼承，但可以實現介面</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Enum中另外有方便操作的EnumSet與EnumMap類別，未來會於其他篇幅中補充</p></div>`,32),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","index.html.vue"]]);export{k as default};
