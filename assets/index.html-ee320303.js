const n=JSON.parse('{"key":"v-4cc69060","path":"/java/010505/","title":"抽象類別與介面","lang":"zh-TW","frontmatter":{"title":"抽象類別與介面","date":"2021-03-08T09:17:54.000Z","permalink":"/java/010505/","category":["Java","Java基礎","物件導向相關"],"tag":["程式學習"],"order":5,"description":"抽象類別 介紹 在介紹抽象類別前先回顧繼承中的範例 public class Shape{ protected int xPoint;// 位於坐標繫上的x位置 protected int yPoint;// 位於坐標繫上的y位置 public Shape(int xPoint, int yPoint) { this.xPoint = xPoint; this.yPoint = yPoint; } // 形狀都需要有取面積的方法 public float getArea() { return 0f; } // 形狀都需要有取周長的方法 public float getPerimeter() { return 0f; } }","head":[["meta",{"property":"og:url","content":"https://www.ed-lin.com/java/010505/"}],["meta",{"property":"og:site_name","content":"Ed Log 工程人日誌"}],["meta",{"property":"og:title","content":"抽象類別與介面"}],["meta",{"property":"og:description","content":"抽象類別 介紹 在介紹抽象類別前先回顧繼承中的範例 public class Shape{ protected int xPoint;// 位於坐標繫上的x位置 protected int yPoint;// 位於坐標繫上的y位置 public Shape(int xPoint, int yPoint) { this.xPoint = xPoint; this.yPoint = yPoint; } // 形狀都需要有取面積的方法 public float getArea() { return 0f; } // 形狀都需要有取周長的方法 public float getPerimeter() { return 0f; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-TW"}],["meta",{"property":"og:updated_time","content":"2023-03-02T13:04:26.000Z"}],["meta",{"property":"article:tag","content":"程式學習"}],["meta",{"property":"article:published_time","content":"2021-03-08T09:17:54.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-02T13:04:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象類別與介面\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-08T09:17:54.000Z\\",\\"dateModified\\":\\"2023-03-02T13:04:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"抽象類別","slug":"抽象類別","link":"#抽象類別","children":[{"level":3,"title":"介紹","slug":"介紹","link":"#介紹","children":[]},{"level":3,"title":"abstract 修飾字","slug":"abstract-修飾字","link":"#abstract-修飾字","children":[]},{"level":3,"title":"使用範例","slug":"使用範例","link":"#使用範例","children":[]}]},{"level":2,"title":"介面","slug":"介面","link":"#介面","children":[{"level":3,"title":"使用範例","slug":"使用範例-1","link":"#使用範例-1","children":[]}]}],"git":{"createdTime":1677762266000,"updatedTime":1677762266000,"contributors":[{"name":"LSYu7152","email":"k1207152@gmail.com","commits":1}]},"readingTime":{"minutes":4.67,"words":1400},"filePathRelative":"java/01.Java基礎/05.物件導向相關/05.抽象類別與介面.md","localizedDate":"2021年3月8日","excerpt":"<h2> 抽象類別</h2>\\n<h3> 介紹</h3>\\n<p>在介紹抽象類別前先回顧<a href=\\"/java/2e9a44/#%E7%B9%BC%E6%89%BF%E8%88%87%E5%BB%BA%E6%A7%8B%E5%AD%90\\" target=\\"blank\\">繼承</a>中的範例</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Shape</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">int</span> xPoint<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 位於坐標繫上的x位置</span>\\n    <span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">int</span> yPoint<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 位於坐標繫上的y位置</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Shape</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> xPoint<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> yPoint<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>xPoint <span class=\\"token operator\\">=</span> xPoint<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>yPoint <span class=\\"token operator\\">=</span> yPoint<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token comment\\">// 形狀都需要有取面積的方法</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">float</span> <span class=\\"token function\\">getArea</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0f</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token comment\\">// 形狀都需要有取周長的方法</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">float</span> <span class=\\"token function\\">getPerimeter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0f</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
