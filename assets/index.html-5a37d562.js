import{_ as t,W as a,X as n,Y as d}from"./framework-d3c6dbde.js";const s={},e=d(`<h2 id="java中的算數運算子" tabindex="-1"><a class="header-anchor" href="#java中的算數運算子" aria-hidden="true">#</a> Java中的算數運算子</h2><p>在 Java 中，基本的運算總共有五種，除了我們常見的加減乘除以外還多了一個模數運算</p><table><thead><tr><th>算術運算子</th><th>使用範例</th><th>說明</th></tr></thead><tbody><tr><td>+</td><td>a + b</td><td>a 加上 b</td></tr><tr><td>-</td><td>a - b</td><td>a 減掉 b</td></tr><tr><td>*</td><td>a * b</td><td>a 乘上 b</td></tr><tr><td>/</td><td>a / b</td><td>a 除以 b</td></tr><tr><td>%</td><td>a % b</td><td>取 a 除以 b 的餘數</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>整數除法的時候，因為整數型態的緣故並不會有小數點後的數字(可以理解為小數點後會捨去)</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>模數運算子(%)只能用在整數型態，如果用在非整數型態將會造成編譯錯誤</p></div><h2 id="計算優先權" tabindex="-1"><a class="header-anchor" href="#計算優先權" aria-hidden="true">#</a> 計算優先權</h2><p>就如同數學中的四則運算一樣，在程式中的算術運算子也運算上的優先順序。</p><p>基本上可以理解為 小括號 優先於 乘除模數 優先於 加減法，接著便是 <strong>由左至右</strong></p><p>詳細的優先級可見下表(1為最優先 2次之 以此類推)</p><table><thead><tr><th>運算子</th><th>優先值</th><th>相同優先值的運作順序</th></tr></thead><tbody><tr><td>括號()、[]</td><td>1</td><td>右至左</td></tr><tr><td>遞增遞減 ++ -- 、 負號 - 、 NOT ! 、 補數 ~</td><td>2</td><td>左至右</td></tr><tr><td>乘 * 、除 / 、模數 %</td><td>3</td><td>左至右</td></tr><tr><td>加減 + -</td><td>4</td><td>左至右</td></tr><tr><td>位元移動 &lt;&lt; &gt;&gt; 無正負性位元右移&gt;&gt;&gt;</td><td>5</td><td>左至右</td></tr><tr><td>大小於判斷 &lt; &gt; &lt;= &gt;=</td><td>6</td><td>左至右</td></tr><tr><td>等於判斷 == !=</td><td>7</td><td>左至右</td></tr><tr><td>AND &amp;</td><td>8</td><td>左至右</td></tr><tr><td>XOR ^</td><td>9</td><td>左至右</td></tr><tr><td>OR !</td><td>10</td><td>左至右</td></tr><tr><td>簡化AND &amp;&amp;</td><td>11</td><td>左至右</td></tr><tr><td>簡化OR ||</td><td>12</td><td>左至右</td></tr><tr><td>三元運算 ?:</td><td>13</td><td>右至左</td></tr><tr><td>指定運算 =</td><td>14</td><td>右至左</td></tr><tr><td>簡化指定運算 += -= *= /= %= &amp;= |= ^=</td><td>15</td><td>右至左</td></tr></tbody></table><h2 id="範例" tabindex="-1"><a class="header-anchor" href="#範例" aria-hidden="true">#</a> 範例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    c <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 計算後結果存回c變數中</span>
    <span class="token comment">// c 為 2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),r=[e];function p(c,o){return a(),n("div",null,r)}const l=t(s,[["render",p],["__file","index.html.vue"]]);export{l as default};
